
RGB LED color changer button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000194  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008f7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000020  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000a0  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000064  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000103  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000024  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000e0  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

int main(void)
{
	//Again we define the data direction register
	//Now we include 3 leds, because then we have a treasure chest
	DDRB &= ~(1<<Button);
  7c:	bd 98       	cbi	0x17, 5	; 23
	DDRB|= (1<<GREEN);
  7e:	b8 9a       	sbi	0x17, 0	; 23
	DDRB|= (1<<BLUE);
  80:	b9 9a       	sbi	0x17, 1	; 23
	DDRB|= (1<<RED);
  82:	ba 9a       	sbi	0x17, 2	; 23
	PORTA|=(1<<Button);
  84:	dd 9a       	sbi	0x1b, 5	; 27

	while(1) {
		if (PINA & (1<<Button)){
  86:	cd 9b       	sbis	0x19, 5	; 25
  88:	0b c0       	rjmp	.+22     	; 0xa0 <main+0x24>
			if (LED == 6)
  8a:	80 91 60 00 	lds	r24, 0x0060
  8e:	86 30       	cpi	r24, 0x06	; 6
  90:	19 f4       	brne	.+6      	; 0x98 <main+0x1c>
				LED = 0;
  92:	10 92 60 00 	sts	0x0060, r1
  96:	f7 cf       	rjmp	.-18     	; 0x86 <main+0xa>
			else
				LED = LED + 1;
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	80 93 60 00 	sts	0x0060, r24
  9e:	f3 cf       	rjmp	.-26     	; 0x86 <main+0xa>
		}
		else{
		switch (LED)
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	b1 f0       	breq	.+44     	; 0xd4 <main+0x58>
  a8:	28 f4       	brcc	.+10     	; 0xb4 <main+0x38>
  aa:	88 23       	and	r24, r24
  ac:	49 f0       	breq	.+18     	; 0xc0 <main+0x44>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	11 f5       	brne	.+68     	; 0xf6 <main+0x7a>
  b2:	0b c0       	rjmp	.+22     	; 0xca <main+0x4e>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	b9 f0       	breq	.+46     	; 0xe6 <main+0x6a>
  b8:	90 f0       	brcs	.+36     	; 0xde <main+0x62>
  ba:	85 30       	cpi	r24, 0x05	; 5
  bc:	e1 f4       	brne	.+56     	; 0xf6 <main+0x7a>
  be:	17 c0       	rjmp	.+46     	; 0xee <main+0x72>
		{
			case 0:
			PORTB |= (1<<GREEN);
  c0:	c0 9a       	sbi	0x18, 0	; 24
			PORTB &= ~(1<<BLUE) & ~(1<<RED);
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	89 7f       	andi	r24, 0xF9	; 249
  c6:	88 bb       	out	0x18, r24	; 24
			break;
  c8:	de cf       	rjmp	.-68     	; 0x86 <main+0xa>
			
			case 1:
			PORTB &= ~(1<<GREEN) & ~(1<<RED);
  ca:	88 b3       	in	r24, 0x18	; 24
  cc:	8a 7f       	andi	r24, 0xFA	; 250
  ce:	88 bb       	out	0x18, r24	; 24
			PORTB |= (1<<BLUE);			
  d0:	c1 9a       	sbi	0x18, 1	; 24
			break;
  d2:	d9 cf       	rjmp	.-78     	; 0x86 <main+0xa>
			
			case 2:
			PORTB &= ~(1<<GREEN) & ~(1<<BLUE);
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8c 7f       	andi	r24, 0xFC	; 252
  d8:	88 bb       	out	0x18, r24	; 24
			PORTB |= (1<<RED);
  da:	c2 9a       	sbi	0x18, 2	; 24
			break;
  dc:	d4 cf       	rjmp	.-88     	; 0x86 <main+0xa>
			
			case 3:
			PORTB &= ~(1<<RED);
  de:	c2 98       	cbi	0x18, 2	; 24
			PORTB |= (1<<GREEN) | (1<<BLUE);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	88 bb       	out	0x18, r24	; 24
			
			case 4:
			PORTB &= ~(1<<GREEN);
  e6:	c0 98       	cbi	0x18, 0	; 24
			PORTB |= (1<<RED) | (1<<BLUE);
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	88 bb       	out	0x18, r24	; 24
			
			case 5:
			PORTB &= ~(1<<BLUE);
  ee:	c1 98       	cbi	0x18, 1	; 24
			PORTB |= (1<<GREEN) | (1<<RED);
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	85 60       	ori	r24, 0x05	; 5
  f4:	88 bb       	out	0x18, r24	; 24
			
			default:
			PORTB |= (1<<GREEN) & (1<<BLUE) & (1<<RED);
  f6:	88 b3       	in	r24, 0x18	; 24
  f8:	88 bb       	out	0x18, r24	; 24
			break;
  fa:	c5 cf       	rjmp	.-118    	; 0x86 <main+0xa>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
