
Shift Regsiter 7 segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000160  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000937  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000469  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000162  00000000  00000000  00000e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000295  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000164  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001e  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000013ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitSPI>:


void InitSPI(void)
{
	//Setup IO
	SHIFT_REGISTER |= (DATA | LATCH | CLOCK); //Set control pins as outputs
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	SHIFT_PORT &= ~(DATA | LATCH | CLOCK);        //Set control pins low
  72:	88 b3       	in	r24, 0x18	; 24
  74:	8f 74       	andi	r24, 0x4F	; 79
  76:	88 bb       	out	0x18, r24	; 24
	
	SPCR = ( (1<<SPE) | (1<<MSTR) | (1<<SPR1) | (1<<SPR0));
  78:	83 e5       	ldi	r24, 0x53	; 83
  7a:	8d b9       	out	0x0d, r24	; 13
  7c:	08 95       	ret

0000007e <WriteByteSPI>:
}

void WriteByteSPI(unsigned char byte) {
	SPDR = byte;												//Loads byte into Data Register
  7e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));									//Wait for transmission to complete
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <WriteByteSPI+0x2>
}
  84:	08 95       	ret

00000086 <ToggleLatch>:

void ToggleLatch(void){
	PORTB |= LATCH;
  86:	c4 9a       	sbi	0x18, 4	; 24
	PORTB &= ~LATCH;
  88:	c4 98       	cbi	0x18, 4	; 24
  8a:	08 95       	ret

0000008c <main>:
}


int main(void)
{
	InitSPI();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <InitSPI>
	PORTB &= ~LATCH;
  90:	c4 98       	cbi	0x18, 4	; 24
		WriteByteSPI(_E);
		ToggleLatch();
		_delay_ms(500);
		*/
		
		WriteByteSPI(_I);
  92:	8f ec       	ldi	r24, 0xCF	; 207
  94:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  98:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f e9       	ldi	r18, 0x9F	; 159
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x16>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x20>
  ac:	00 00       	nop
		_delay_ms(500);
		
		WriteByteSPI(OFF);
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  b4:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
  b8:	87 ea       	ldi	r24, 0xA7	; 167
  ba:	91 e6       	ldi	r25, 0x61	; 97
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x30>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x36>
  c2:	00 00       	nop
		_delay_ms(100);
		
		WriteByteSPI(_E);
  c4:	86 e8       	ldi	r24, 0x86	; 134
  c6:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  ca:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
  ce:	9f e9       	ldi	r25, 0x9F	; 159
  d0:	26 e8       	ldi	r18, 0x86	; 134
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	91 50       	subi	r25, 0x01	; 1
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x48>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x52>
  de:	00 00       	nop
		_delay_ms(500);
		
		WriteByteSPI(OFF);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  e6:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
  ea:	87 ea       	ldi	r24, 0xA7	; 167
  ec:	91 e6       	ldi	r25, 0x61	; 97
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x62>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x68>
  f4:	00 00       	nop
		_delay_ms(100);
		
		WriteByteSPI(_E);
  f6:	86 e8       	ldi	r24, 0x86	; 134
  f8:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  fc:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
 100:	9f e9       	ldi	r25, 0x9F	; 159
 102:	26 e8       	ldi	r18, 0x86	; 134
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	91 50       	subi	r25, 0x01	; 1
 108:	20 40       	sbci	r18, 0x00	; 0
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x7a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x84>
 110:	00 00       	nop
		_delay_ms(500);
		
		WriteByteSPI(OFF);
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
 118:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
 11c:	87 ea       	ldi	r24, 0xA7	; 167
 11e:	91 e6       	ldi	r25, 0x61	; 97
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x94>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x9a>
 126:	00 00       	nop
		_delay_ms(100);
		
		WriteByteSPI(_E);
 128:	86 e8       	ldi	r24, 0x86	; 134
 12a:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
 12e:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
 132:	9f e9       	ldi	r25, 0x9F	; 159
 134:	26 e8       	ldi	r18, 0x86	; 134
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	91 50       	subi	r25, 0x01	; 1
 13a:	20 40       	sbci	r18, 0x00	; 0
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xac>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xb6>
 142:	00 00       	nop
		_delay_ms(500);
		
		WriteByteSPI(OFF);
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
 14a:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
 14e:	87 ea       	ldi	r24, 0xA7	; 167
 150:	91 e6       	ldi	r25, 0x61	; 97
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xc6>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xcc>
 158:	00 00       	nop
 15a:	9b cf       	rjmp	.-202    	; 0x92 <main+0x6>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
