
74HC595 shift register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ce  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000023b  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000162  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001fc  00000000  00000000  00000cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000161  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000001e  00000000  00000000  00001075  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitSPI>:
#define LATCH (1<<PB4);
#define CLOCK (1<<PB7); 
#define NUM_595 1;

void InitSPI(void) {
	DDRB |= (1<<PB5) | (1<<PB4) | (1<<PB7);					//Sets SS, MOSI, and SCK as output
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~((1<<PB5) | (1<<PB4) | (1<<PB7));			//Sets the control pins
  72:	88 b3       	in	r24, 0x18	; 24
  74:	8f 74       	andi	r24, 0x4F	; 79
  76:	88 bb       	out	0x18, r24	; 24
	
	//SPI Configuration Register  SPE = SPI Enable  MSTR = Master
	SPCR = ( (1<<SPE) | (1<<MSTR) | (1<<SPR1) | (1<<SPR0));		//Enable SPI, Master, set clock rate fck/128
  78:	83 e5       	ldi	r24, 0x53	; 83
  7a:	8d b9       	out	0x0d, r24	; 13
  7c:	08 95       	ret

0000007e <WriteByteSPI>:
}

void WriteByteSPI(unsigned char byte) {
	SPDR = byte;												//Loads byte into Data Register
  7e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));									//Wait for transmission to complete
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <WriteByteSPI+0x2>
}
  84:	08 95       	ret

00000086 <ToggleLatch>:

void ToggleLatch(void){
	  PORTB |= LATCH;
  86:	c4 9a       	sbi	0x18, 4	; 24
	  PORTB &= ~LATCH;
  88:	c4 98       	cbi	0x18, 4	; 24
  8a:	08 95       	ret

0000008c <main>:
}


int main(void)
{
	InitSPI();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <InitSPI>
    while(1)
    {
        //TODO:: Please write your application code 
		WriteByteSPI(0b01010101);
  90:	85 e5       	ldi	r24, 0x55	; 85
  92:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  96:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 e6       	ldi	r24, 0x69	; 105
  9e:	98 e1       	ldi	r25, 0x18	; 24
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x14>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x1e>
  aa:	00 00       	nop
		_delay_ms(1000);
		
		WriteByteSPI(0b10101010);
  ac:	8a ea       	ldi	r24, 0xAA	; 170
  ae:	0e 94 3f 00 	call	0x7e	; 0x7e <WriteByteSPI>
		ToggleLatch();
  b2:	0e 94 43 00 	call	0x86	; 0x86 <ToggleLatch>
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	89 e6       	ldi	r24, 0x69	; 105
  ba:	98 e1       	ldi	r25, 0x18	; 24
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x30>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x3a>
  c6:	00 00       	nop
  c8:	e3 cf       	rjmp	.-58     	; 0x90 <main+0x4>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
