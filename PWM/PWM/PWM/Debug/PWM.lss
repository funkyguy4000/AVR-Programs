
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001d4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000937  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000fa  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000b3  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000f5  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000050  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000df  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000056  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
      Setting WGM10 & WGM11 only will give phase correct PWM 
      Setting WGM12 also will give fast PWM, but that's on TCCR1B 
      COM1A1 = Clear OC1A on match when upcounting-Set OC1A 
               when downcounting on match 
   */ 
    TCCR1A |= ((1<<WGM10)|(1<<WGM11)|(1<<COM1A1)); 
  7c:	8f b5       	in	r24, 0x2f	; 47
  7e:	83 68       	ori	r24, 0x83	; 131
  80:	8f bd       	out	0x2f, r24	; 47
      Prescaler    8 = (1<<CS11) 
      Prescaler   64 = ((1<<CS11)|(1<<CS10)) 
      Prescaler  256 = (1<<CS12) 
      Prescaler 1024 = ((1<<CS12)|(1<<CS10)) 
   */ 
    TCCR1B |= ((1<<WGM12)|(1<<CS10)); 
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	89 60       	ori	r24, 0x09	; 9
  86:	8e bd       	out	0x2e, r24	; 46

    // Set Timer1/PWM register value to 0. 
    OCR1A = 0; 
  88:	1b bc       	out	0x2b, r1	; 43
  8a:	1a bc       	out	0x2a, r1	; 42

    /* Enable OC1A ie PD5 as output. 
         */ 
    DDRD = (1<<5); 
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	81 bb       	out	0x11, r24	; 17

    // Enable timer1 overflow interrupt. 
    TIMSK = (1<<TOIE1); 
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	89 bf       	out	0x39, r24	; 57

    sei (); 
  94:	78 94       	sei

    // loop forever, the interrupts are doing the rest 
    for (;;) {                    
        sleep_mode(); 
  96:	85 b7       	in	r24, 0x35	; 53
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	85 bf       	out	0x35, r24	; 53
  9c:	88 95       	sleep
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	85 bf       	out	0x35, r24	; 53
  a4:	f8 cf       	rjmp	.-16     	; 0x96 <main+0x1a>

000000a6 <__vector_8>:
   } 
} 


ISR (TIMER1_OVF_vect) 
{ 
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
    static uint8_t direction;   //enum var 
   static uint8_t slow_down; 

   slow_down++; 
  b6:	80 91 60 00 	lds	r24, 0x0060
  ba:	8f 5f       	subi	r24, 0xFF	; 255
  bc:	80 93 60 00 	sts	0x0060, r24
   if (slow_down == 10) { 
  c0:	8a 30       	cpi	r24, 0x0A	; 10
  c2:	a1 f5       	brne	.+104    	; 0x12c <__vector_8+0x86>
      switch (direction)          
  c4:	80 91 61 00 	lds	r24, 0x0061
  c8:	88 23       	and	r24, r24
  ca:	19 f0       	breq	.+6      	; 0xd2 <__vector_8+0x2c>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	31 f5       	brne	.+76     	; 0x11c <__vector_8+0x76>
  d0:	14 c0       	rjmp	.+40     	; 0xfa <__vector_8+0x54>
      { 
         case UP:   //increment counter and check against Max-1 
            pwm = pwm + 2; 
  d2:	80 91 62 00 	lds	r24, 0x0062
  d6:	90 91 63 00 	lds	r25, 0x0063
  da:	02 96       	adiw	r24, 0x02	; 2
  dc:	90 93 63 00 	sts	0x0063, r25
  e0:	80 93 62 00 	sts	0x0062, r24
            if (pwm >= 1023) 
  e4:	80 91 62 00 	lds	r24, 0x0062
  e8:	90 91 63 00 	lds	r25, 0x0063
  ec:	8f 3f       	cpi	r24, 0xFF	; 255
  ee:	93 40       	sbci	r25, 0x03	; 3
  f0:	a8 f0       	brcs	.+42     	; 0x11c <__vector_8+0x76>
            //start the counting other direction 
               direction = DOWN; 
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 61 00 	sts	0x0061, r24
  f8:	11 c0       	rjmp	.+34     	; 0x11c <__vector_8+0x76>
            break; 

         case DOWN:   //decrement counter and check against min 
            pwm--; 
  fa:	80 91 62 00 	lds	r24, 0x0062
  fe:	90 91 63 00 	lds	r25, 0x0063
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	90 93 63 00 	sts	0x0063, r25
 108:	80 93 62 00 	sts	0x0062, r24
            if (pwm == 0) 
 10c:	80 91 62 00 	lds	r24, 0x0062
 110:	90 91 63 00 	lds	r25, 0x0063
 114:	89 2b       	or	r24, r25
 116:	11 f4       	brne	.+4      	; 0x11c <__vector_8+0x76>
            //start counting in other direction 
               direction = UP; 
 118:	10 92 61 00 	sts	0x0061, r1
            break; 
      } 
      //set the calc'd value to Timer1 output register 
      OCR1A = pwm; 
 11c:	80 91 62 00 	lds	r24, 0x0062
 120:	90 91 63 00 	lds	r25, 0x0063
 124:	9b bd       	out	0x2b, r25	; 43
 126:	8a bd       	out	0x2a, r24	; 42
      slow_down = 0; 
 128:	10 92 60 00 	sts	0x0060, r1
   } 
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
